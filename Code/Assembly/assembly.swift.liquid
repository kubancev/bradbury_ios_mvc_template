//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import Swinject
import SwinjectStoryboard
import ViperKit

class {{ module_info.name }}ModuleAssembly: Assembly {
    func assemble(container: Container) {
        // View
        container.storyboardInitCompleted({{ module_info.name }}ViewController.self, initCompleted: { (r, c) in
            c.delegate = r.resolve({{ module_info.name }}ModuleProtocol.self, argument: c) as! {{ module_info.name }}ViewDelegate
            c.moduleInput = c.delegate as? ModuleInput
        })

        // Presenter
        container.register({{ module_info.name }}ModuleProtocol.self) { (r, c: {{ module_info.name }}ViewController) in
            let presenter =  {{ module_info.name }}Presenter()
            presenter.view = c
            return presenter
        }.initCompleted { (r, p) in
            let p = p as! {{ module_info.name }}Presenter
            p.router = r.resolve({{ module_info.name }}RouterProtocol.self, argument: p.view as TransitionHandler?)
            p.dataSource = r.resolve({{ module_info.name }}DataSourceProtocol.self, argument: p as {{ module_info.name }}DataSourceDelegate)
        }

        // Router
        container.register({{ module_info.name }}RouterProtocol.self) { (r, v: TransitionHandler?) in
            let router = {{ module_info.name }}Router()
            router.transitionHandler = v
            router.interfaceManager = r.resolve(DefaultInterfaceManager.self)
            return router
        }

        // DataSource
        container.register({{ module_info.name }}DataSourceProtocol.self) { (r, p: {{ module_info.name }}DataSourceDelegate) in
            let dataSource =  {{ module_info.name }}DataSource()
            dataSource.delegate = p
            return dataSource
        }
    }
}
